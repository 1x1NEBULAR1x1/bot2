import asyncio
import datetime
import random
import re

from aiogram import Router, Bot, F
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import keyboards as kb
from cfg import BOT_USERNAME, ADMINS_IDS, REFERRER_MISSION, END_GAME_MESSAGE, CHATS_IDS, MOMENT_LOTO, DAILY_LOTO, \
    WEEKLY_LOTO, MONTHLY_LOTO, MODERATORS_IDS, QUESTIONS, HELP, LOTO_TYPE, LOTO_LIMIT
from db import (get_last_game, delete_game, start_game, get_users, get_game, join_game, get_user_address,
                get_active_addresses_count, get_referrers_count, get_addresses, deactivate_address,
                activate_address, delete_address, get_address, get_prizes, check_subscribe_db, get_free_address,
                get_prizes_count, get_prize, del_prize, end_game, get_game_users, add_winner, get_user,
                get_active_game, number_of_users, get_game_winners, is_banned, update_balance, get_daily_ticket,
                get_monthly_ticket, get_weekly_ticket, get_daily_users_count, get_weekly_users_count,
                get_monthly_users_count, add_spin, check_vip, get_games_history, add_pin, get_pins,
                get_all_prizes, add_moment_loto, get_daily_moment_loto_by_user_id, get_weekly_moment_loto_by_user_id,
                get_monthly_moment_loto_by_user_id, get_daily_moment_loto, get_weekly_moment_loto,
                get_monthly_moment_loto, set_user_anonim, get_all_moment_loto, get_daily_moment_loto_db,
                get_weekly_moment_loto_db, get_monthly_moment_loto_db, update_username_name, get_sends, delete_button,
                get_send_button, delete_send, delete_send_media, add_send,
                get_chats, get_chat, delete_chat, get_scheduled_later, get_scheduled_interval, get_send,
                get_scheduled_send, delete_scheduled_send, deactivate_scheduled_send, activate_scheduled_send,
                get_users_vip, get_users_novip, get_users_no_admin, get_unread_messages_count, get_messages_from_user,
                get_unread_messages_from_user, get_messages_from_sender, get_message,
                delete_message, add_message_from_user, read_message, unread_message, add_donate, get_donates,
                get_time_limit, get_antispam, edit_antispam, get_request, edit_request, get_goodbye, edit_goodbye,
                get_game_timeout, set_game_timeout)
from fsm import FSM
from heandlers import is_chat_member, start, user_send_message, admin_send_message, interval_sending, later_sending, \
    is_moderator

callbacks = Router()
@callbacks.callback_query(F.data == 'moment_block')
async def moment_block(call: CallbackQuery):
    await call.answer('‚ö†  –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', cache_time=20)
@callbacks.callback_query(F.data == 'loto_block_1')
async def loto_block_1(call: CallbackQuery):
    await call.answer('‚ö†  –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', cache_time=20)
@callbacks.callback_query(F.data == 'loto_block_2')
async def loto_block_2(call: CallbackQuery):
    await call.answer('‚ö†  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—ã–≥—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 –∏–≥—Ä –≤ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é', cache_time=20)
@callbacks.callback_query(F.data.startswith('admin_timestart_scheduled_'))
async def admin_timestart_scheduled(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id, send_id=int(call.data.split('_')[3]))
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú',
                                 reply_markup=await kb.admin_back_to_interval_keyboard())
    await state.set_state(FSM.set_send_starttime)
@callbacks.callback_query(F.data.startswith('admin_timeend_scheduled_'))
async def admin_timeend_scheduled(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id, send_id=int(call.data.split('_')[3]))
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú',
                                 reply_markup=await kb.admin_back_to_interval_keyboard())
    await state.set_state(FSM.set_send_endtime)
@callbacks.callback_query(F.data == 'admin_moment_min')
async def admin_moment_min(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É',
                                 reply_markup=await kb.admin_back_to_loto_settings_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_moment_min)
@callbacks.callback_query(F.data == 'admin_moment_max')
async def admin_moment_max(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É',
                                 reply_markup=await kb.admin_back_to_loto_settings_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_moment_max)
@callbacks.callback_query(F.data.startswith('captcha_'))
async def captcha(call: CallbackQuery, state: FSMContext, bot: Bot):
    check = int(call.data.split('_')[1])
    if check == 1:
        await start(message=call.message, bot=bot, state=state, captcha_check=True)
    else:
        await start(message=call.message, bot=bot, state=state, captcha_check=False)
@callbacks.callback_query(F.data == 'user_help')
async def user_help(call: CallbackQuery):
    await call.message.edit_text('üôã‚Äç‚ôÇÔ∏è  <b>–ü–æ–º–æ—â –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>', reply_markup=await kb.user_help_keyboard())
@callbacks.callback_query(F.data == 'user_contact')
async def user_contact(call: CallbackQuery):
    await call.message.edit_text('üìû  <b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç–æ—Ä–æ–º</b>', reply_markup=await kb.admin_url_keyboard())
@callbacks.callback_query(F.data == 'user_questions')
async def user_questions(call: CallbackQuery):
    text = 'üìö  <b>–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã</b>\n'
    for question in QUESTIONS:
        text += f'‚ùì  <b><i>{question[0]}</i> - ‚úÖ  {question[1]}\n</b>'
    await call.message.edit_text(text, reply_markup=await kb.back_to_help_keyboard())
@callbacks.callback_query(F.data == 'user_use')
async def user_use(call: CallbackQuery):
    await call.message.edit_text(HELP, reply_markup=await kb.back_to_help_keyboard())
@callbacks.callback_query(F.data == 'admin_request')
async def admin_request(call: CallbackQuery):
    value, text = 0, '–û—à–∏–±–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
    if await get_request():
        if (await get_request())[0] == 1:
            text = '–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã'
            value = 1
        else:
            text = '–ë–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã'
            value = 0
    await call.message.edit_text(text, reply_markup=await kb.admin_request_keyboard(value))
@callbacks.callback_query(F.data == 'admin_request_on')
async def admin_request_on(call: CallbackQuery):
    await edit_request(1)
    await call.message.edit_text('–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã',
                                 reply_markup=await kb.admin_request_keyboard(1))
@callbacks.callback_query(F.data == 'admin_request_off')
async def admin_request_off(call: CallbackQuery):
    await edit_request(0)
    await call.message.edit_text('–ë–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã',
                                 reply_markup=await kb.admin_request_keyboard(0))
@callbacks.callback_query(F.data == 'admin_goodbye')
async def admin_goodbye(call: CallbackQuery):
    value, text = 0, '–ü—Ä–æ—â–∞–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ'
    if await get_goodbye():
        if (await get_goodbye())[0] == 1:
            text = '–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ'
            value = 1
        else:
            text = '–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ'
            value = 0
    await call.message.edit_text(text, reply_markup=await kb.admin_goodbye_keyboard(value))
@callbacks.callback_query(F.data == 'admin_goodbye_on')
async def admin_goodbye_on(call: CallbackQuery):
    await edit_goodbye(1)
    await call.message.edit_text('–ü—Ä–æ—â–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ', reply_markup=await kb.admin_goodbye_keyboard(1))
@callbacks.callback_query(F.data == 'admin_goodbye_off')
async def admin_goodbye_off(call: CallbackQuery):
    await edit_goodbye(0)
    await call.message.edit_text('–ü—Ä–æ—â–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ', reply_markup=await kb.admin_goodbye_keyboard(0))
@callbacks.callback_query(F.data == 'admin_accept_message')
async def admin_accept_message(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    if not data:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ', reply_markup=await kb.admin_back_keyboard())
        return
    msg = await add_message_from_user(data["user_id"], data["sender_id"], data["text"])
    await bot.send_message(chat_id=data["user_id"], text=data["text"],
                           reply_markup=await kb.user_message_keyboard(msg))
    await bot.edit_message_text(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', message_id=data["message_id"], 
                                chat_id=call.message.chat.id, reply_markup=await kb.admin_message_keyboard(msg[0]))
@callbacks.callback_query(F.data == 'admin_messages_send')
async def admin_messaged_send(call: CallbackQuery, state: FSMContext):
    await state.update_data(sender_id=call.message.chat.id, message_id=call.message.message_id)
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                 reply_markup=await kb.admin_back_to_messages_keyboard())
    await state.set_state(FSM.set_message_user)
@callbacks.callback_query(F.data == 'user_mail')
async def user_mail(call: CallbackQuery):
    unread_count = await get_unread_messages_count(call.message.chat.id)
    await call.message.edit_text('üì¨<b>  –ü–æ—á—Ç–∞:</b>', reply_markup=await kb.user_mail_keyboard(unread_count))
@callbacks.callback_query(F.data == 'user_messages_post')
async def user_messages_post(call: CallbackQuery):
    messages = await get_messages_from_user(call.message.chat.id)
    unread_messages = await get_unread_messages_from_user(call.message.chat.id)
    await call.message.edit_text('üì¨ <b> –°–æ–æ–±—â–µ–Ω–∏—è:</b>',
                                 reply_markup=await kb.user_messages_post_keyboard(messages, unread_messages,
                                                                                   call.message.chat.id))
@callbacks.callback_query(F.data.startswith('user_messages_send'))
async def user_messages_send(call: CallbackQuery):
    await call.message.edit_text('üìç <b> –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>',
                                 reply_markup=await kb.user_messages_send_keyboard(ADMINS_IDS))
@callbacks.callback_query(F.data.startswith('user_messages_to_'))
async def user_messages_to(call: CallbackQuery, state: FSMContext):
    admin_id = int(call.data.split('_')[3])
    await state.update_data(admin_id=admin_id, sender_id=call.message.chat.id, message_id=call.message.message_id)
    await call.message.edit_text('‚úè <b> –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>',
                                 reply_markup=await kb.user_back_to_messages_keyboard())
    await state.set_state(FSM.set_user_message_text)
@callbacks.callback_query(F.data == 'user_accept_message')
async def user_accept_message(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    if not data:
        await call.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ', reply_markup=await kb.user_back_keyboard())
        return
    user = await get_user(data['sender_id'])
    msg = await add_message_from_user(data['sender_id'], data['admin_id'], data['text'])
    await bot.send_message(chat_id=data['admin_id'], text=f'üí¨<b>  –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '
                                                          f'{user[1] if user[1] else user[2]}:\n{data["text"]}</b>',
                           reply_markup=await kb.admin_message_keyboard(msg[0]))
    await bot.edit_message_text('‚úÖ <b> –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>',
                                reply_markup=await kb.user_back_to_messages_keyboard(),
                                chat_id=call.message.chat.id, message_id=data['message_id'])
    await state.clear()
@callbacks.callback_query(F.data == 'user_accept_reply_message')
async def user_accept_reply_message(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    admin_text = (await get_message(data['msg_id']))[4][:20:]
    await bot.send_message(chat_id=data['user_id'], text=f'üí¨<b>  –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {admin_text}:'
                                                         f'\n{data["text"]}</b>',
                           reply_markup=await kb.admin_message_keyboard(data["msg_id"]))
    await add_message_from_user(data['user_id'], data['sender_id'], data['text'])
    await bot.edit_message_text('‚úÖ <b> –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>',
                                reply_markup=await kb.user_back_to_messages_keyboard(),
                                chat_id=call.message.chat.id, message_id=data['message_id'])
    await state.clear()
@callbacks.callback_query(F.data.startswith('user_messages_from_'))
async def user_messages_from(call: CallbackQuery):
    sender = int(call.data.split('_')[3])
    messages = await get_messages_from_sender(call.message.chat.id, sender)
    await call.message.edit_text('üì¨<b>  –°–æ–æ–±—â–µ–Ω–∏—è:</b>',
                                 reply_markup=await kb.user_messages_from_keyboard(messages))

@callbacks.callback_query(F.data.startswith('user_reply_message_'))
async def user_reply_message(call: CallbackQuery, state: FSMContext):
    message_id = int(call.data.split('_')[3])
    message = await get_message(message_id)
    await state.update_data(msg_id=message_id, user_id=message[2], sender_id=call.message.chat.id,
                            message_id=call.message.message_id)
    await call.message.edit_text('‚úè <b> –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:</b>',
                                 reply_markup=await kb.user_back_to_messages_keyboard())
    await state.set_state(FSM.set_user_reply_text)
@callbacks.callback_query(F.data == 'admin_messages')
async def admin_messages(call: CallbackQuery):
    messages_count = await get_unread_messages_count(call.message.chat.id)
    await call.message.edit_text('–ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π:',
                                 reply_markup=await kb.admin_messages_keyboard(messages_count))
@callbacks.callback_query(F.data == 'admin_messages_post')
async def admin_messages_post(call: CallbackQuery):
    messages = await get_messages_from_user(call.message.chat.id)
    unread_messages = await get_unread_messages_from_user(call.message.chat.id)
    await call.message.edit_text('–ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π:',
                                 reply_markup=await kb.admin_messages_post_keyboard(messages, unread_messages,
                                                                                    call.message.chat.id))
@callbacks.callback_query(F.data.startswith('admin_messages_from_'))
async def admin_messages_from(call: CallbackQuery):
    sender = int(call.data.split('_')[3])
    messages = await get_messages_from_sender(call.message.chat.id, sender)
    await call.message.edit_text('–ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π:',
                                 reply_markup=await kb.admin_messages_from_keyboard(messages))
@callbacks.callback_query(F.data.startswith('admin_message_'))
async def admin_message(call: CallbackQuery):
    message_id = int(call.data.split('_')[2])
    message = await get_message(message_id)
    user = await get_user(message[2])
    await read_message(message_id)
    await call.message.edit_text(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user[1] if user[1] else user[2]}:\n{message[4]}',
                                 reply_markup=await kb.admin_message_keyboard(message_id))
@callbacks.callback_query(F.data.startswith('admin_delete_message_'))
async def admin_delete_message(call: CallbackQuery):
    message_id = int(call.data.split('_')[3])
    await call.message.edit_text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ',
                                 reply_markup=await kb.admin_accept_delete_message_keyboard(message_id))
@callbacks.callback_query(F.data.startswith('admin_accept_delete_message_'))
async def admin_accept_delete_message(call: CallbackQuery):
    message_id = int(call.data.split('_')[4])
    await delete_message(message_id)
    await call.message.edit_text('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', reply_markup=await kb.admin_back_to_messages_keyboard())
@callbacks.callback_query(F.data.startswith('admin_answer_message_'))
async def admin_answer_message(call: CallbackQuery, state: FSMContext):
    message_id = int(call.data.split('_')[3])
    user = await get_user((await get_message(message_id))[1])
    await state.update_data(message_id=call.message.message_id, user_id=user[0], sender_id=call.message.chat.id,
                            msg_id=message_id)
    await call.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è {user[1] if user[1] else user[2]}:',
                                 reply_markup=await kb.admin_back_to_messages_keyboard())
    await state.set_state(FSM.set_answer_text)
@callbacks.callback_query(F.data == 'admin_send_answer')
async def admin_send_answer(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    msg = await get_message(data["msg_id"])
    await bot.send_message(chat_id=msg[1], text=f'<b>üí¨  –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: </b>\n'
                                                         f'<i>{msg[4][:20:]}\n</i>'
                                                         f'<b>{data["text"]}</b>',
                           reply_markup=await kb.user_answer_keyboard(msg[2]))
    await add_message_from_user(data['user_id'], data['sender_id'], data['text'])
    await bot.edit_message_text(text='–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', message_id=data['message_id'], chat_id=call.message.chat.id,
                                reply_markup=await kb.admin_back_to_messages_keyboard())
    await state.clear()
@callbacks.callback_query(F.data.startswith('admin_unread_message_'))
async def admin_unread_message(call: CallbackQuery):
    message_id = int(call.data.split('_')[3])
    await unread_message(message_id)
    await call.message.edit_text(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ',
                                 reply_markup=await kb.admin_back_to_messages_keyboard())
@callbacks.callback_query(F.data == 'admin_moderators')
async def admin_moderators(call: CallbackQuery):
    await call.message.edit_text('–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:', reply_markup=await kb.admin_moderators_keyboard())
@callbacks.callback_query(F.data == 'admin_list_moderators')
async def admin_list_moderators(call: CallbackQuery):
    await call.message.edit_text('–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:',
                                 reply_markup=await kb.admin_list_moderators_keyboard(MODERATORS_IDS))
@callbacks.callback_query(F.data.startswith('admin_delete_moderator_'))
async def admin_delete_moderator(call: CallbackQuery):
    moderator_id = int(call.data.split('_')[3])
    await call.message.edit_text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ',
                                 reply_markup=await kb.admin_accept_delete_moderator_keyboard(moderator_id))
@callbacks.callback_query(F.data.startswith('admin_accept_delete_moderator_'))
async def admin_accept_delete_moderator(call: CallbackQuery):
    moderator_id = int(call.data.split('_')[4])
    MODERATORS_IDS.remove(moderator_id)
    await call.message.edit_text('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω', reply_markup=await kb.admin_moderators_keyboard())
@callbacks.callback_query(F.data.startswith('admin_moderator_'))
async def admin_moderator(call: CallbackQuery):
    moderator_id = int(call.data.split('_')[2])
    await call.message.edit_text('–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:',
                                 reply_markup=await kb.admin_moderator_keyboard(moderator_id))
@callbacks.callback_query(F.data == 'admin_add_moderator')
async def admin_add_moderator(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ):',
                                 reply_markup=await kb.admin_back_to_moderators_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_moderator_id)
@callbacks.callback_query(F.data == 'admin_accept_moderator')
async def admin_accept_moderator(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    MODERATORS_IDS.append(data['user_id'])
    await bot.edit_message_text('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=await kb.admin_moderators_keyboard(),
                                chat_id=call.message.chat.id, message_id=data['message_id'])
    await state.clear()
@callbacks.callback_query(F.data.startswith('user_message_'))
async def user_message(call: CallbackQuery):
    message_id = int(call.data.split('_')[2])
    message = await get_message(message_id)
    await read_message(message_id)
    await call.message.edit_text(f'üí¨<b>  –°–æ–æ–±—â–µ–Ω–∏–µ:\n<i>{message[4]}</i></b>',
                                 reply_markup=await kb.user_message_keyboard(message))
@callbacks.callback_query(F.data == 'admin_settings')
async def admin_settings(call: CallbackQuery):
    await call.message.edit_text('–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:', reply_markup=await kb.admin_settings_keyboard())
@callbacks.callback_query(F.data == 'user_donate')
async def user_donate(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('üí∏  <b>–ú—ã –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å '
                                '–ø—Ä–æ–µ–∫—Ç—É, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ª—é–±—É—é —Å—É–º–º—É —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å!\n'
                                '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è</b>', reply_markup=await kb.user_back_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_value_donate)
@callbacks.callback_query(F.data == 'user_accept_donate')
async def user_accept_donate(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await bot.edit_message_text('üôã‚Äç‚ôÇÔ∏è  <b>–ú—ã –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>', chat_id=call.message.chat.id,
                                message_id=data['message_id'], reply_markup=await kb.user_back_keyboard())
    await update_balance(call.message.chat.id, -data['value'])
    await add_donate(call.message.chat.id, data['value'])
@callbacks.callback_query(F.data == 'admin_donates')
async def admin_donates(call: CallbackQuery):
    donates, text, total = await get_donates(), '', 0
    for donate in donates:
        total += donate[2]
        user = await get_user(donate[1])
        text += f'{donate[2]} –æ—Ç {user[1] if user[1] else user[2]} ({donate[3]})\n'
    text += f'<b>–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π: {total}</b>'
    await call.message.edit_text('–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:\n' + text, reply_markup=await kb.admin_back_keyboard())
@callbacks.callback_query(F.data == 'admin_antispam')
async def admin_antispam(call: CallbackQuery):
    time_limit = await get_time_limit()
    antispam = await get_antispam()
    text = (f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {time_limit[0]} —Å–µ–∫—É–Ω–¥ –Ω–∞ '
            f'–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ') if antispam[0] == 1 else '–ê–Ω—Ç–∏—Å–ø–∞–º –≤—ã–∫–ª—é—á–µ–Ω'
    await call.message.edit_text(text=text, reply_markup=await kb.admin_antispam_keyboard(antispam))
@callbacks.callback_query(F.data == 'admin_antispam_on')
async def admin_antispam_on(call: CallbackQuery):
    time_limit = await get_time_limit()
    await edit_antispam(1)
    await call.message.edit_text(f'–ê–Ω—Ç–∏—Å–ø–∞–º –≤–∫–ª—é—á–µ–Ω\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {time_limit[0]} '
                                 f'—Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
                                 reply_markup=await kb.admin_antispam_keyboard((await get_antispam())[0]))
@callbacks.callback_query(F.data == 'admin_antispam_off')
async def admin_antispam_off(call: CallbackQuery):
    await edit_antispam(0)
    await call.message.edit_text('–ê–Ω—Ç–∏—Å–ø–∞–º –≤—ã–∫–ª—é—á–µ–Ω',
                                 reply_markup=await kb.admin_antispam_keyboard((await get_antispam())[0]))
@callbacks.callback_query(F.data == 'admin_antispam_edit')
async def admin_antispam_edit(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:',
                                 reply_markup=await kb.admin_back_to_antispam_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_antispam_value)
@callbacks.callback_query(F.data.startswith('admin_later_'))
async def admin_later(call: CallbackQuery):
    page = int(call.data.split('_')[2])
    scheds = await get_scheduled_later()
    await call.message.edit_text(text='–ú–µ–Ω—é –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:',
                                 reply_markup=await kb.admin_later_keyboard(scheds, page))
@callbacks.callback_query(F.data.startswith('admin_laterr_') or F.data.startswith('admin_interval_'))
async def admin_late_send(call: CallbackQuery):
    sched_id = int(call.data.split('_')[2])
    sched = await get_scheduled_send(sched_id)
    send = await get_send(sched[0])
    await call.message.edit_text(text=f'{send[1] if send[1] else "–ú–µ–¥–∏–∞"} –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ {sched[1]} –≤  {sched[3]}',
                                 reply_markup=await kb.admin_scheduled_keyboard(sched_id,
                                                                                call.data.split('_')[1] == 'interval'))
@callbacks.callback_query(F.data.startswith('admin_deactivate_scheduled_'))
async def admin_cancel_scheduled(call: CallbackQuery, scheduler: AsyncIOScheduler):
    sched_id = int(call.data.split('_')[3])
    await deactivate_scheduled_send(sched_id)
    try:
        scheduler.remove_job(job_id=str(sched_id))
    except:
        pass
    await call.message.edit_text(text='–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=await kb.admin_back_to_sends_keyboard())
@callbacks.callback_query(F.data.startswith('admin_delete_scheduled_'))
async def admin_delete_scheduled(call: CallbackQuery, scheduler: AsyncIOScheduler):
    sched_id = int(call.data.split('_')[3])
    await delete_scheduled_send(sched_id)
    try: scheduler.remove_job(job_id=str(sched_id))
    except: pass
    await call.message.edit_text(text='–û—Ç–ø—Ä–∞–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=await kb.admin_back_to_sends_keyboard())
@callbacks.callback_query(F.data.startswith('admin_activate_scheduled_'))
async def admin_activate_scheduled(call: CallbackQuery, scheduler: AsyncIOScheduler, bot: Bot):
    sched_id = int(call.data.split('_')[3])
    sched = await get_scheduled_send(sched_id)
    await activate_scheduled_send(sched_id)
    users = []
    match sched[1]:
        case "vip":
            users = await get_users_vip()
        case "novip":
            users = await get_users_novip()
        case "all":
            users = await get_users_no_admin(ADMINS_IDS)
        case "chat":
            users = await get_chats()
    if sched[2] == 'interval':
        try:
            match_ = re.match(r'(\d+)\s?([–ê-—èA-z])', sched[3])
            interval = int(match_.group(1))
            match match_.group(2):
                case '–º':
                    interval *= 1
                case '—á':
                    interval *= 60
                case '–¥':
                    interval *= 60 * 24
                case '–Ω':
                    interval *= 60 * 24 * 7
                case '':
                    interval *= 60 * 24
        except ValueError:
            return
        scheduler.add_job(func=interval_sending, trigger='interval', minutes=interval, id=str(sched[4]),
                          kwargs={'users': users, 'send_id': sched[0], 'bot': bot})
        await call.message.edit_text(text='–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞',
                                     reply_markup=await kb.admin_back_to_interval_keyboard())
    else:
        scheduler.add_job(func=later_sending, trigger='date', run_date=datetime.datetime.fromisoformat(sched[3]),
                          id=f'{sched[4]}', kwargs={'users': users, 'send_id': sched[0], 'bot': bot, 'sched_id': sched[4]})
        await call.message.edit_text(text='–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞',
                                     reply_markup=await kb.admin_back_to_later_keyboard())
@callbacks.callback_query(F.data.startswith('admin_delete_chat_'))
async def admin_delete_chat(call: CallbackQuery):
    chat_id = int(call.data.split('_')[3])
    await call.message.edit_text(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ',
                                 reply_markup=await kb.admin_accept_delete_chat_keyboard(chat_id))
@callbacks.callback_query(F.data.startswith('admin_accept_delete_chat_'))
async def admin_accept_delete_chat(call: CallbackQuery):
    chat_id = int(call.data.split('_')[4])
    await delete_chat(chat_id)
    await call.message.edit_text(text='–ß–∞—Ç —É–¥–∞–ª–µ–Ω', reply_markup=await kb.admin_back_to_chats_keyboard())
@callbacks.callback_query(F.data.startswith('admin_intervals_'))
async def admin_interval(call: CallbackQuery):
    scheds = await get_scheduled_interval()
    page = int(call.data.split('_')[2])
    await call.message.edit_text(text='–ú–µ–Ω—é –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:',
                                 reply_markup=await kb.admin_interval_keyboard(scheds, page))
@callbacks.callback_query(F.data.startswith('admin_intervall_'))
async def admin_interval_send(call: CallbackQuery):
    sched_id = int(call.data.split('_')[2])
    sched = await get_scheduled_send(sched_id)
    send = await get_send(sched[0])
    text = f'{send[1] if send[1] else "–ú–µ–¥–∏–∞"} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ {sched[3]}'
    if send[4]:
        text += f' —Å {send[4]}'
    if send[5]:
        text += f' –¥–æ {send[5]}'
    await call.message.edit_text(text=text,
                                 reply_markup=await kb.admin_scheduled_keyboard(sched_id, True))
@callbacks.callback_query(F.data.startswith('admin_sends_all'))
async def admin_sends_all(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    page = int(call.data.split('_')[3])
    try:
        if data:
            if data['message_id_1']:
                await bot.delete_message(chat_id=call.message.chat.id, message_id=data['message_id_1'])
                await state.clear()
    except TelegramBadRequest:
        pass
    await call.message.edit_text(text='–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:',
                                 reply_markup=await kb.admin_sends_all_keyboard(await get_sends(), page))
@callbacks.callback_query(F.data.startswith('admin_send_all_'))
async def admin_send_all(call: CallbackQuery, bot: Bot, state: FSMContext):
    send_id = int(call.data.split('_')[3])
    await call.message.delete()
    await state.update_data(message_id_1=
    (await user_send_message(bot=bot, user_id=call.message.chat.id, send_id=send_id)).message_id)
    await state.update_data(message_id_2=(await call.message.answer(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?',
                            reply_markup=await kb.admin_accept_send_all_keyboard(send_id))).message_id)
@callbacks.callback_query(F.data.startswith('admin_accept_send_all_'))
async def admin_accept_send_all(call: CallbackQuery, bot: Bot, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    users = await get_users()
    await bot.delete_message(chat_id=call.message.chat.id, message_id=(await state.get_data())['message_id_1'])
    await bot.delete_message(chat_id=call.message.chat.id, message_id=(await state.get_data())['message_id_2'])
    msg = await call.message.answer(text=f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞, –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(users) * 0.05} —Å–µ–∫—É–Ω–¥')
    for user in users:
        if user[0] != call.message.chat.id:
            await user_send_message(user_id=user[0], bot=bot, send_id=send_id)
    await bot.edit_message_text(text='–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', message_id=msg.message_id, chat_id=call.message.chat.id,
                                reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.clear()
@callbacks.callback_query(F.data.startswith('admin_sends_vip_'))
async def admin_sends_vip(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    page = int(call.data.split('_')[3])
    try:
        if data:
            if data['message_id_1']:
                await bot.delete_message(chat_id=call.message.chat.id, message_id=data['message_id_1'])
                await state.clear()
    except:
        pass
    await call.message.edit_text(text='–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è VIP:',
                                 reply_markup=await kb.admin_sends_vip_keyboard(await get_sends(), page))
@callbacks.callback_query(F.data.startswith('admin_send_vip_'))
async def admin_send_vip(call: CallbackQuery, bot: Bot, state: FSMContext):
    send_id = int(call.data.split('_')[3])
    await call.message.delete()
    await state.update_data(message_id_1=(await user_send_message(bot=bot, user_id=call.message.chat.id,
                                                                  send_id=send_id)).message_id)
    await state.update_data(message_id_2=(await call.message.answer(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?',
                            reply_markup=await kb.admin_accept_send_vip_keyboard(send_id))).message_id)
@callbacks.callback_query(F.data.startswith('admin_accept_send_vip_'))
async def admin_accept_send_vip(call: CallbackQuery, bot: Bot, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    users = await get_users()
    await bot.delete_message(chat_id=call.message.chat.id, message_id=(await state.get_data())['message_id_1'])
    await bot.delete_message(chat_id=call.message.chat.id, message_id=(await state.get_data())['message_id_2'])
    msg = await call.message.answer(text=f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞, –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(users) * 0.05} —Å–µ–∫—É–Ω–¥')
    for user in users:
        if await check_vip(user[0]):
            if user[0] != call.message.chat.id:
                await user_send_message(user_id=user[0], bot=bot, send_id=send_id)
    await bot.edit_message_text(text='–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', message_id=msg.message_id,
                                reply_markup=await kb.admin_sends_vip_keyboard(await get_sends()),
                                chat_id=call.message.chat.id)
    await state.clear()
@callbacks.callback_query(F.data.startswith('admin_sends_novip_'))
async def admin_sends_no_vip(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    page = int(call.data.split('_')[3])
    try:
        if data:
            if data['message_id_1']:
                await bot.delete_message(chat_id=call.message.chat.id, message_id=data['message_id_1'])
                await state.clear()
    except:
        pass
    await call.message.edit_text(text='–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–µ VIP:',
                                 reply_markup=await kb.admin_sends_novip_keyboard(await get_sends(), page))
@callbacks.callback_query(F.data.startswith('admin_send_chats_'))
async def admin_send_no_vip(call: CallbackQuery, bot: Bot, state: FSMContext):
    send_id = int(call.data.split('_')[3])
    await call.message.delete()
    await state.update_data(message_id_1=
    (await user_send_message(bot=bot, user_id=call.message.chat.id, send_id=send_id)).message_id)
    await state.update_data(message_id_2=(await call.message.answer(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?',
                            reply_markup=await kb.admin_accept_send_novip_keyboard(send_id))).message_id)
@callbacks.callback_query(F.data.startswith('admin_accept_send_chats_'))
async def admin_accept_send_chats(call: CallbackQuery, bot: Bot, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    chats = await get_chats()
    await bot.delete_message(chat_id=call.message.chat.id, message_id=(await state.get_data())['message_id_1'])
    await bot.delete_message(chat_id=call.message.chat.id, message_id=(await state.get_data())['message_id_2'])
    msg = await call.message.answer(text=f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞, –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(chats) * 0.05} —Å–µ–∫—É–Ω–¥')
    for chat in chats:
        if chat[0] != call.message.chat.id:
            await user_send_message(user_id=chat[0], bot=bot, send_id=send_id)
    await bot.edit_message_text(text='–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', message_id=msg.message_id, chat_id=call.message.chat.id,
                                reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.clear()
@callbacks.callback_query(F.data.startswith('admin_send_novip_'))
async def admin_send_no_vip(call: CallbackQuery, bot: Bot, state: FSMContext):
    send_id = int(call.data.split('_')[3])
    await call.message.delete()
    await state.update_data(message_id_1=
    (await user_send_message(bot=bot, user_id=call.message.chat.id, send_id=send_id)).message_id)
    await state.update_data(message_id_2=(await call.message.answer(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?',
                            reply_markup=await kb.admin_accept_send_novip_keyboard(send_id))).message_id)
@callbacks.callback_query(F.data.startswith('admin_accept_send_novip_'))
async def admin_accept_send_novip(call: CallbackQuery, bot: Bot, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    users = await get_users()
    await bot.delete_message(chat_id=call.message.chat.id, message_id=(await state.get_data())['message_id_1'])
    await bot.delete_message(chat_id=call.message.chat.id, message_id=(await state.get_data())['message_id_2'])
    msg = await call.message.answer(text=f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞, –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(users) * 0.05} —Å–µ–∫—É–Ω–¥')
    for user in users:
        if not await check_vip(user[0]):
            if user[0] != call.message.chat.id:
                await user_send_message(user_id=user[0], bot=bot, send_id=send_id)
    await bot.edit_message_text(text='–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', message_id=msg.message_id, chat_id=call.message.chat.id,
                                reply_markup=await kb.admin_sends_novip_keyboard(await get_sends()))
    await state.clear()
@callbacks.callback_query(F.data == 'admin_chats')
async def admin_groups(call: CallbackQuery):
    await call.message.edit_text(text='–ú–µ–Ω—é –≥—Ä—É–ø–ø:', reply_markup=await kb.admin_chats_keyboard(await get_chats()))
@callbacks.callback_query(F.data.startswith('admin_chat_'))
async def admin_chat(call: CallbackQuery):
    chat_id = int(call.data.split('_')[2])
    chat = await get_chat(chat_id)
    await call.message.edit_text(text=f'–ì—Ä—É–ø–ø–∞ {chat[1]}', reply_markup=await kb.admin_chat_keyboard(chat_id))
@callbacks.callback_query(F.data.startswith('admin_delete_chat_'))
async def admin_delete_chat(call: CallbackQuery):
    chat_id = int(call.data.split('_')[3])
    await call.message.edit_text(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã?',
                                 reply_markup=await kb.admin_accept_delete_chat_keyboard(chat_id))
@callbacks.callback_query(F.data.startswith('admin_accept_delete_chat_'))
async def admin_accept_delete_chat(call: CallbackQuery):
    chat_id = int(call.data.split('_')[4])
    await delete_chat(chat_id)
    await call.message.edit_text(text='–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞',
                                 reply_markup=await kb.admin_back_to_chats_keyboard())
@callbacks.callback_query(F.data.startswith('admin_sends_chats_'))
async def admin_send_chats(call: CallbackQuery, state: FSMContext, bot: Bot):
    page = int(call.data.split('_')[3])
    sends = await get_sends()
    data = await state.get_data()
    try:
        if data:
            if data['message_id_1']:
                await bot.delete_message(chat_id=call.message.chat.id, message_id=data['message_id_1'])
                await state.clear()
    except:
        pass
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—ã:',
                                 reply_markup=await kb.admin_sends_chats_keyboard(sends, page))
@callbacks.callback_query(F.data.startswith('admin_send_chat_'))
async def admin_send_chat(call: CallbackQuery, state: FSMContext, bot: Bot):
    send_id = int(call.data.split('_')[3])
    await call.message.delete()
    await state.update_data(message_id_1=
                            (await user_send_message(bot=bot, user_id=call.message.chat.id,
                                                     send_id=send_id)).message_id)
    await state.update_data(message_id_2=
    (await call.message.answer(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?', reply_markup=await kb.admin_accept_send_chats_keyboard(
                                                                            send_id))).message_id)
@callbacks.callback_query(F.data.startswith('admin_sends_database_'))
async def admin_send_database(call: CallbackQuery):
    page = int(call.data.split("_")[3])
    await call.message.delete()
    await call.message.answer(text='–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:',
                              reply_markup=await kb.admin_sends_database_keyboard(await get_sends(), page))
@callbacks.callback_query(F.data.startswith('admin_button_'))
async def admin_button(call: CallbackQuery, state: FSMContext):
    await state.clear()
    button_id = int(call.data.split('_')[2])
    button = await get_send_button(button_id)
    await call.message.delete()
    await call.message.answer(text=f'–ö–Ω–æ–ø–∫–∞ {button[2]}\n{button[3]}', reply_markup=await kb.admin_button_keyboard(button))
@callbacks.callback_query(F.data.startswith('admin_delete_button_'))
async def admin_delete_button(call: CallbackQuery):
    button_id = int(call.data.split('_')[3])
    await call.message.edit_text(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏?',
                                 reply_markup=await kb.admin_accept_delete_button_keyboard(button_id))
@callbacks.callback_query(F.data.startswith('admin_accept_delete_button_'))
async def admin_accept_delete_button(call: CallbackQuery):
    button_id = int(call.data.split('_')[4])
    button = await get_send_button(button_id)
    await delete_button(button_id)
    await call.message.edit_text(text='–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=await kb.admin_back_to_send_keyboard(button[1]))
@callbacks.callback_query(F.data.startswith('admin_url_button_'))
async def admin_url_button(call: CallbackQuery, state: FSMContext):
    button_id = int(call.data.split('_')[3])
    button = await get_send_button(button_id)
    await state.update_data(button_id=button_id, message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:',
                                 reply_markup=await kb.admin_back_to_button_keyboard(button[0]))
    await state.set_state(FSM.set_new_button_url)
@callbacks.callback_query(F.data.startswith('admin_text_button_'))
async def admin_text_button(call: CallbackQuery, state: FSMContext):
    button_id = int(call.data.split('_')[3])
    button = await get_send_button(button_id)
    await state.update_data(button_id=button_id, message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:',
                                 reply_markup=await kb.admin_back_to_button_keyboard(button[0]))
    await state.set_state(FSM.set_new_button_text)
@callbacks.callback_query(F.data.startswith('admin_add_button_'))
async def admin_add_button(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[3])
    await call.message.delete()
    await state.update_data(send_id=send_id, message_id=(await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:',
                                 reply_markup=await kb.admin_back_to_send_keyboard(send_id))).message_id)
    await state.set_state(FSM.set_button_text)
@callbacks.callback_query(F.data.startswith('admin_delete_send_'))
async def admin_delete_send(call: CallbackQuery):
    send_id = int(call.data.split('_')[3])
    await call.message.delete()
    await call.message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è?',
                              reply_markup=await kb.admin_accept_delete_send_keyboard(send_id))
@callbacks.callback_query(F.data.startswith('admin_accept_delete_send_'))
async def admin_accept_delete_send(call: CallbackQuery):
    send_id = int(call.data.split('_')[4])
    await delete_send(send_id)
    await call.message.edit_text(text='–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
                                 reply_markup=await kb.admin_sends_database_keyboard(await get_sends()))
@callbacks.callback_query(F.data.startswith('admin_text_send_'))
async def admin_text_send(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[3])
    await state.update_data(send_id=send_id, message_id=call.message.message_id)
    await call.message.delete()
    await state.update_data(message_id=(await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:',
                              reply_markup=await kb.admin_back_to_send_keyboard(send_id))).message_id)
    await state.set_state(FSM.set_new_send_text)
@callbacks.callback_query(F.data.startswith('admin_media_send_'))
async def admin_media_send(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[3])
    await state.update_data(send_id=send_id, message_id=call.message.message_id)
    await call.message.delete()
    await call.message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:',
                              reply_markup=await kb.admin_back_to_send_keyboard(send_id))
    await state.set_state(FSM.set_new_send_media)
@callbacks.callback_query(F.data.startswith('admin_delete_media_send_'))
async def admin_delete_media_send(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞?',
                            reply_markup=await kb.admin_accept_delete_media_send_keyboard(int(call.data.split('_')[4])))
@callbacks.callback_query(F.data.startswith('admin_accept_delete_media_send_'))
async def admin_accept_delete_media_send(call: CallbackQuery):
    await delete_send_media(int(call.data.split('_')[5]))
    await call.message.edit_text(text='–ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ',
                                 reply_markup=await kb.admin_back_to_send_keyboard(int(call.data.split('_')[5])))
@callbacks.callback_query(F.data == 'admin_sends')
async def admin_sends(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    try:
        if data:
            if data['message_id_1']:
                await bot.delete_message(chat_id=call.message.chat.id, message_id=data['message_id_1'])
                await state.clear()
    except:
        pass
    await call.message.edit_text(text='–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', reply_markup=await kb.admin_sends_keyboard())
@callbacks.callback_query(F.data == 'admin_no_text_send')
async def admin_no_text_send(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', reply_markup=await kb.admin_back_keyboard())
    await state.set_state(FSM.set_send_media)
@callbacks.callback_query(F.data == 'admin_add_send')
async def admin_add_send(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', reply_markup=await kb.admin_send_text_keyboard())
    await state.set_state(FSM.set_send_text)
@callbacks.callback_query(F.data == 'admin_add_send_no_text')
async def admin_add_send_no_text(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id, text=None)
    await call.message.edit_text(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:',
                                 reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.set_state(FSM.set_send_media)
@callbacks.callback_query(F.data == 'admin_add_send_no_media')
async def admin_add_send_no_media(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id, media=None, type='text')
    data = await state.get_data()
    await add_send(text=data['text'], media=data['media'], type=data['type'])
    await call.message.edit_text(text='–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.clear()
@callbacks.callback_query(F.data.startswith('admin_add_media_send_'))
async def admin_add_media_send(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.update_data(message_id=(await call.message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:',
                         reply_markup=await kb.admin_back_keyboard())).message_id, send_id=int(call.data.split('_')[4]))
    await state.set_state(FSM.add_send_photo)
@callbacks.callback_query(F.data.startswith('admin_late_send_all_'))
async def admin_late_send_all(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    await state.update_data(message_id=call.message.message_id, send_id=send_id, target='all')
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º):',
                                 reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.set_state(FSM.set_send_time)
@callbacks.callback_query(F.data.startswith('admin_late_send_vip_'))
async def admin_late_send_vip(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    await state.update_data(message_id=call.message.message_id, send_id=send_id, target='vip')
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º):',
                                 reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.set_state(FSM.set_send_time)
@callbacks.callback_query(F.data.startswith('admin_late_send_novip_'))
async def admin_late_send_no_vip(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    await state.update_data(message_id=call.message.message_id, send_id=send_id, target='novip')
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º):',
                                 reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.set_state(FSM.set_send_time)
@callbacks.callback_query(F.data.startswith('admin_late_send_chats_'))
async def admin_late_send_chat(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    await state.update_data(message_id=call.message.message_id, send_id=send_id, target='chat')
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º):',
                                 reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.set_state(FSM.set_send_time)
@callbacks.callback_query(F.data.startswith('admin_interval_send_all_'))
async def admin_interval_send_all(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    await state.update_data(message_id=call.message.message_id, send_id=send_id, target='all')
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è(–º - –º–∏–Ω—É—Ç—ã, —á - —á–∞—Å—ã, –¥ - –¥–Ω–∏, –Ω - –Ω–µ–¥–µ–ª–∏, '
                                 '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–Ω–∏)::',
                                 reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.set_state(FSM.set_send_interval)
@callbacks.callback_query(F.data.startswith('admin_interval_send_vip_'))
async def admin_interval_send_vip(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    await state.update_data(message_id=call.message.message_id, send_id=send_id, target='vip')
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è(–º - –º–∏–Ω—É—Ç—ã, —á - —á–∞—Å—ã, –¥ - –¥–Ω–∏, –Ω - –Ω–µ–¥–µ–ª–∏, '
                                 '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–Ω–∏):',
                                 reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.set_state(FSM.set_send_interval)
@callbacks.callback_query(F.data.startswith('admin_interval_send_novip_'))
async def admin_interval_send_no_vip(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    await state.update_data(message_id=call.message.message_id, send_id=send_id, target='novip')
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è(–º - –º–∏–Ω—É—Ç—ã, —á - —á–∞—Å—ã, –¥ - –¥–Ω–∏, –Ω - –Ω–µ–¥–µ–ª–∏, '
                                 '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–Ω–∏):',
                                 reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.set_state(FSM.set_send_interval)
@callbacks.callback_query(F.data.startswith('admin_interval_send_chats_'))
async def admin_interval_send_chat(call: CallbackQuery, state: FSMContext):
    send_id = int(call.data.split('_')[4])
    await state.update_data(message_id=call.message.message_id, send_id=send_id, target='chat')
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è(–º - –º–∏–Ω—É—Ç—ã, —á - —á–∞—Å—ã, –¥ - –¥–Ω–∏, –Ω - –Ω–µ–¥–µ–ª–∏, '
                                 '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–Ω–∏):', reply_markup=await kb.admin_back_to_sends_keyboard())
    await state.set_state(FSM.set_send_interval)
@callbacks.callback_query(F.data == 'admin_menu')
async def menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    game = await get_last_game()
    if game is None:
        active = 2
    else:
        active = game[4]
    messages_count = await get_unread_messages_count(call.message.chat.id)
    if await is_moderator(call.message):
        await call.message.edit_text(text='–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:',
                                     reply_markup=await kb.moderator_keyboard(active=active))
        return
    await call.message.edit_text(text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:',
                                 reply_markup=await kb.admin_keyboard(active=active, messages_count=messages_count))
@callbacks.callback_query(F.data == 'check_subscribe')
async def check_subscribe(call: CallbackQuery, bot: Bot, state: FSMContext):
    buttons = await is_chat_member(message=call.message, bot=bot)
    if not buttons:
        await start(message=call.message, bot=bot, state=state)
@callbacks.callback_query(F.data == 'send_cash')
async def send_cash(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='üì≤  <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:</b>',
                                 reply_markup=await kb.user_back_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_username_to_send_cash)
@callbacks.callback_query(F.data == 'admin_new_game')
async def admin_new_game(call: CallbackQuery, state: FSMContext):
    game = await get_active_game()
    if game:
        await call.message.edit_text(text='–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É',
                                     reply_markup=await kb.admin_back_keyboard())
        return
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—ë –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)\n'
                                      '–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –∏–≥—Ä',
                                 reply_markup=await kb.admin_new_game())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_game_name)
@callbacks.callback_query(F.data == 'admin_loto_settings')
async def admin_loto_settings(call: CallbackQuery):
    await call.message.edit_text(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—Ç–µ—Ä–µ–π:',
                                 reply_markup=await kb.admin_loto_settings_keyboard())
@callbacks.callback_query(F.data == 'admin_moment_loto_settings')
async def admin_moment_loto_settings(call: CallbackQuery):
    type_ = ''
    match LOTO_TYPE[0]:
        case 'standart':
            type_ = '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'
        case 'low':
            type_ = '–Ω–∏–∑–∫–∞—è'
        case 'hight':
            type_ = '–≤—ã—Å–æ–∫–∞—è'
        case 'simple':
            type_ = '–ø—Ä–æ—Å—Ç–∞—è'
        case 'loser':
            type_ = '–ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è'
    await call.message.edit_text(text=f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏:\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø: {type_}\n'
                                      f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {LOTO_LIMIT[0]}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {LOTO_LIMIT[1]}',
                                 reply_markup=await kb.admin_moment_loto_settings_keyboard())
@callbacks.callback_query(F.data == 'admin_moment_test')
async def admin_moment_loto_test(call: CallbackQuery):
    await call.message.edit_text('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏ –Ω–∞—á–∞—Ç–æ')
    total, wins = 0, 0
    for i in range(1000):
        start_value, value = 1000, 1000
        if random.randint(0, 99) < 95:
            res = random.randint(0, 9)
        else:
            res = 0
        if LOTO_TYPE[0] == 'standart':
            match res:
                case 0:
                    value = start_value
                case 1:
                    value *= 2
                    wins += 1
                case 2:
                    value *= 3
                    wins += 1
                case 3:
                    value *= 4
                    wins += 1
                case _:
                    value = 0
        elif LOTO_TYPE[0] == 'low':
            match res:
                case 0:
                    value = 0
                case 1:
                    value *= 2
                    wins += 1
                case 2:
                    value *= 3
                    wins += 1
                case 3:
                    value *= 4
                    wins += 1
                case 4:
                    pass
                case _:
                    value = 0
        elif LOTO_TYPE[0] == 'hight':
            match res:
                case 0:
                    value *= 2
                    wins += 1
                case 1:
                    value *= 2
                    wins += 1
                case 2:
                    value *= 3
                    wins += 1
                case 3:
                    value *= 4
                    wins += 1
                case _:
                    value = 0
        elif LOTO_TYPE[0] == 'simple':
            match res:
                case 0:
                    value = 0
                case 1:
                    value *= 2
                    wins += 1
                case 2:
                    value *= 2
                    wins += 1
                case 3:
                    value *= 2
                    wins += 1
                case 4:
                    value *= 2
                    wins += 1
                case 5:
                    value *= 2
                    wins += 1
                case _:
                    value = 0
        elif LOTO_TYPE[0] == 'loser':
            match res:
                case 0:
                    pass
                case 1:
                    value *= 2
                    wins += 1
                case 2:
                    value = 0
                case 3:
                    value *= 4
                    wins += 1
                case _:
                    value = 0
        total += value
    await call.message.edit_text('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ 1000\n'
                                 f'–†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏: 1000\n–û–±—â–∞—è —Å—É–º–º–∞ {1000*1000}\n–ü–æ–±–µ–¥: {wins}\n'
                                 f'–ü—Ä–æ–∏–≥—Ä—ã—à–µ–π: {1000-wins}\n–û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {total}\n–î–æ—Ö–æ–¥ —Å–æ —Å—Ç–∞–≤–æ–∫: '
                                 f'{1000*1000-total}',
                                 reply_markup=await kb.admin_moment_loto_settings_keyboard())

@callbacks.callback_query(F.data == 'admin_moment_change_chance')
async def admin_moment_change_chance(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ—Ç–µ—Ä–µ–∏:',
                                 reply_markup=await kb. admin_moment_loto_type_keyboard(LOTO_TYPE[0]))
    await state.set_state(FSM.set_moment_loto_chance)
@callbacks.callback_query(F.data == 'admin_moment_change_coefficient')
async def admin_moment_change_coefficient(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–Ω–æ–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞:',
                                 reply_markup=await kb.admin_back_keyboard())
    await state.set_state(FSM.set_moment_loto_coefficient)
@callbacks.callback_query(F.data == 'admin_daily_loto_settings')
async def admin_daily_loto_settings(call: CallbackQuery):
    await call.message.edit_text(text=f'<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏:\n –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—É–º–º–∞: '
                                      f'<i>{DAILY_LOTO[0]}\n –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è: {DAILY_LOTO[1]}</i>',
                                 reply_markup=await kb.admin_daily_loto_settings_keyboard())
@callbacks.callback_query(F.data == 'admin_weekly_loto_settings')
async def admin_weekly_loto_settings(call: CallbackQuery):
    await call.message.edit_text(text=f'<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏:\n –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—É–º–º–∞: '
                                      f'<i>{WEEKLY_LOTO[0]}\n –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è: {WEEKLY_LOTO[1]}</i>',
                                 reply_markup=await kb.admin_weekly_loto_settings_keyboard())
@callbacks.callback_query(F.data == 'admin_monthly_loto_settings')
async def admin_monthly_loto_settings(call: CallbackQuery):
    await call.message.edit_text(text=f'<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏:\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—É–º–º–∞: '
                                      f'<i>{MONTHLY_LOTO[0]}\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è: {MONTHLY_LOTO[1]}</i>',
                                 reply_markup=await kb.admin_monthly_loto_settings_keyboard())
@callbacks.callback_query(F.data == 'admin_daily_change_count')
async def admin_daily_change_count(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—É–º–º—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏:',
                                 reply_markup=await kb.admin_back_keyboard())
    await state.set_state(FSM.set_daily_loto_value)
@callbacks.callback_query(F.data == 'admin_daily_change_coefficient')
async def admin_daily_change_coefficient(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏:',
                                 reply_markup=await kb.admin_back_keyboard())
    await state.set_state(FSM.set_daily_loto_coefficient)
@callbacks.callback_query(F.data == 'admin_weekly_change_count')
async def admin_weekly_change_count(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—É–º–º—É –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏:',
                                 reply_markup=await kb.admin_back_keyboard())
    await state.set_state(FSM.set_weekly_loto_value)
@callbacks.callback_query(F.data == 'admin_weekly_change_coefficient')
async def admin_weekly_change_coefficient(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏:',
                                 reply_markup=await kb.admin_back_keyboard())
    await state.set_state(FSM.set_weekly_loto_coefficient)
@callbacks.callback_query(F.data == 'admin_monthly_change_count')
async def admin_monthly_change_count(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—É–º–º—É –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏:',
                                 reply_markup=await kb.admin_back_keyboard())
    await state.set_state(FSM.set_monthly_loto_value)
@callbacks.callback_query(F.data == 'admin_monthly_change_coefficient')
async def admin_monthly_change_coefficient(call: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏:',
                                 reply_markup=await kb.admin_back_keyboard())
    await state.set_state(FSM.set_monthly_loto_coefficient)
@callbacks.callback_query(F.data == 'check_join_subscribe')
async def check_join_subscribe(call: CallbackQuery, bot: Bot):
    buttons = await is_chat_member(message=call.message, bot=bot)
    if not buttons:
        await user_game(call, bot)
@callbacks.callback_query(F.data == 'admin_new_game_cancel')
async def admin_new_game_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    game = await get_last_game()
    if game is None:
        active = 2
    else:
        active = game[4]
    await call.message.edit_text(text='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:',
                                 reply_markup=await kb.admin_keyboard(active=active))
@callbacks.callback_query(F.data == 'admin_current_game')
async def admin_current_game(call: CallbackQuery):
    game = await get_last_game()
    if game:
        if game[4] == 1:
            status = '–ê–∫—Ç–∏–≤–Ω–∞'
            text = (f'<b>–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: {game[1]}\n'
                   f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {game[2]}\n'
                   f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {game[3]}\n'
                   f'–°—Ç–∞—Ç—É—Å: {status}</b>\n'
                   f'<i>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {game[5]}</i>')
        else:
            status = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
            text = (f'<b>–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: {game[1]}\n'
                   f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {game[2]}\n'
                   f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {game[3]}\n'
                   f'–°—Ç–∞—Ç—É—Å: {status}</b>\n'
                   f'<i>(—à–∞–±–ª–æ–Ω, –º–æ–∂–Ω–æ –±–µ—Å—Å–ª–µ–¥–Ω–æ —É–¥–∞–ª–∏—Ç—å)</i>')
        await call.message.edit_text(text=text, reply_markup=await kb.current_game_keyboard(game=game))
    else:
        await call.message.edit_text(text='–¢–µ–∫—É—â–∏—Ö –∏–≥—Ä –Ω–µ—Ç', reply_markup=await kb.admin_keyboard())
@callbacks.callback_query(F.data.startswith('admin_del_game_'))
async def admin_del_game(call: CallbackQuery):
    game_id = int(call.data.split('_')[3])
    await delete_game(game_id)
    await call.message.edit_text(text='–®–∞–±–ª–æ–Ω –∏–≥—Ä—ã —É–¥–∞–ª—ë–Ω', reply_markup=await kb.admin_keyboard())
@callbacks.callback_query(F.data.startswith('admin_start_game_'))
async def admin_start_game(call: CallbackQuery, bot: Bot):
    game_id = int(call.data.split('_')[3])
    await start_game(game_id)
    game = await get_game(game_id=game_id)
    users = await get_users()
    await call.message.edit_text(text=f'–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ ({(len(users) + len(CHATS_IDS))*0.09} —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É ...)')
    prizes = await get_prizes(game_id)
    prizes_count = 0
    for prize in prizes:
        prizes_count += prize[3]
    if CHATS_IDS:
        for chat in CHATS_IDS:
            try:
                pin = await bot.send_message(chat_id=chat, text=f'<b>‚ú®  –ù–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –∏–≥—Ä–∞ "{game[1]}"!\n'
                                                                f'‚ö†  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {game[2]}\n</b>'
                                                                f'<i>üéÅ  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: {prizes_count}</i>'
                                             f'\n–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞', reply_markup=await kb.bot_url())
                await bot.pin_chat_message(chat_id=chat, message_id=pin.message_id)
            except TelegramBadRequest:
                pass
            await add_pin(game_id=game_id, message_id=pin.message_id, chat_id=chat)
            await asyncio.sleep(0.09)
    for user in users:
        if True:
            await asyncio.sleep(0.09)
            if True:
                try:
                    await bot.send_message(chat_id=user[0], text=f'<b>‚ú®  –ù–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –∏–≥—Ä–∞ "{game[1]}"!</b>\n'
                                                                 f'<i>‚ö†  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {game[2]}\nüéÅ  <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                                                 f'–ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: {prizes_count}</b></i>',
                                           reply_markup=await kb.user_game_keyboard(game_id=game_id))
                except TelegramRetryAfter as e:
                    await asyncio.sleep(e.retry_after)
                    await bot.send_message(chat_id=user[0], text=f'<b>‚ú®  –ù–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –∏–≥—Ä–∞ "{game[1]}"!</b>\n'
                                                                 f'<i>‚ö†  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {game[2]}\nüéÅ  <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                                                 f'–ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: {prizes_count}</b></i>',
                                           reply_markup=await kb.user_game_keyboard(game_id=game_id))
                except TelegramBadRequest:
                    pass
    await call.message.edit_text(text=f'–ò–≥—Ä–∞ "{game[1]}" –Ω–∞—á–∞—Ç–∞!', reply_markup=await kb.admin_keyboard(game[4]))
@callbacks.callback_query(F.data.startswith('admin_end_game'))
async def admin_end_game(call: CallbackQuery):
    game_id = int(call.data.split('_')[3])
    game = await get_game(game_id=game_id)
    await call.message.edit_text(text=f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É "{game[1]}?',
                                 reply_markup=await kb.admin_end_game(game_id))
@callbacks.callback_query(F.data.startswith('admin_ending_game'))
async def admin_ending_game(call: CallbackQuery, bot: Bot):
    game_id = int(call.data.split('_')[3])
    pins = await get_pins(game_id=game_id)
    if pins:
        for pin in pins:
            await bot.unpin_chat_message(chat_id=pin[2], message_id=pin[1])
            await asyncio.sleep(0.05)
    game = await get_game(game_id=game_id)
    prizes = await get_prizes(game_id)
    prizes_count = 0
    for prize in prizes:
        prizes_count += prize[3]
    prizes = await get_prizes(game_id)
    users = await get_game_users(game_id=game_id)
    await call.message.edit_text(text=f'–ò–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ '
                                      f'({(prizes_count+len(users)+len(CHATS_IDS))*0.09} c–µ–∫—É–Ω–¥)',
                                 reply_markup=await kb.admin_keyboard())
    if users:
        for user in users:
            if user[0] not in ADMINS_IDS:
                await asyncio.sleep(0.09)
                await bot.send_message(chat_id=user[0], text=f'üéâ  <b>–ò–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n<i>üéÅ  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã '
                                                             f'–±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</i>')
    if CHATS_IDS:
        for chat in CHATS_IDS:
            await asyncio.sleep(0.09)
            await bot.send_message(chat_id=chat, text=f'üéâ  <b>–ò–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n<i>üéÅ  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã '
                                                      f'–±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</i>')
    counter = 0
    text = ''
    chat_text = f'<b>‚ú®  –ò–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b>\n'
    users = await get_game_users(game_id=game_id)
    await end_game(game_id=game_id)
    for prize in prizes:
        count = prize[3]
        while count >= 1:
            if users:
                winner = random.choice(users)
                winner_user = await get_user(user_id=winner[0])
                await set_game_timeout(user_id=winner[0])
                if winner_user[12] == 1:
                    chat_text += f'<i>üï∂ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {prize[1]}\n</i>'
                else:
                    chat_text += f'<i>@{winner_user[1]}: {prize[1]}\n</i>'
                users.remove(winner)
                user = await get_user(user_id=winner[0])
                await asyncio.sleep(0.09)
                try:
                    match_ = re.match(r"(\d+)", prize[1].lower())
                    try:
                        if match_:
                            value = int(match_.group(1))
                            await update_balance(winner[0], value)
                    except ValueError:
                        await bot.send_message(chat_id=winner[0], text=f'üéâ  <b>–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∏–≥—Ä–µ!</b>\n<i>üéÅ  '
                                               f'–í–∞—à –ø—Ä–∏–∑: <b>{prize[1]}</b></i>\n<i>‚ú®  –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'
                                               f' –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</i>',
                                               reply_markup=await kb.admin_url_keyboard())
                    await bot.send_message(chat_id=winner[0], text=f'üéâ  <b>–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∏–≥—Ä–µ!</b>\n<i>üéÅ  –í–∞—à –ø—Ä–∏–∑: '
                                           f'<b>{prize[1]}</b></i>\n<i>‚ú®  –ü—Ä–∏–∑ –Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!</i>',
                                           reply_markup=await kb.user_back_keyboard())
                    counter += 1
                except TelegramRetryAfter as e:
                    await asyncio.sleep(e.retry_after)
                    try:
                        await bot.send_message(chat_id=winner[0], text=f'üéâ  <b>–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∏–≥—Ä–µ!</b>\n<i>üéÅ  '
                                               f'–í–∞—à –ø—Ä–∏–∑: <b>{prize[1]}</b></i>\n<i>‚ú®  –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'
                                               f' –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</i>',
                                               reply_markup=await kb.admin_url_keyboard())
                    except Exception as e:
                        print(e)
                        text += f'@{user[1]}: {prize[1]}\n'
                await add_winner(winner[0], prize[0], game_id)
                count -= 1
            else:
                await call.message.edit_text(text=f'–í –∏–≥—Ä–µ –Ω–µ –±—ã–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                                             reply_markup=await kb.admin_keyboard())
                break
        await asyncio.sleep(0.09)
    await end_game(game_id=game_id)
    await call.message.edit_text(
        text=f'–ò–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ù–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {prizes_count - counter}\n{text}',
        reply_markup=await kb.admin_keyboard())
    try:
        if pins:
            for pin in pins:
                await bot.unpin_chat_message(chat_id=pin[2], message_id=pin[1])
                await asyncio.sleep(0.09)
    except Exception as e:
        print(e)
    chat_text += f'\n<i><b>üéÅ  –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!</b></i>'
    if CHATS_IDS:
        for chat in CHATS_IDS:
            await asyncio.sleep(0.09)
            pin = await bot.send_message(chat_id=chat, text=chat_text, reply_markup=await kb.bot_url())
            await bot.pin_chat_message(chat_id=chat, message_id=pin.message_id)

@callbacks.callback_query(F.data.startswith('admin_canc_game'))
async def admin_end_game(call: CallbackQuery):
    game_id = int(call.data.split('_')[3])
    game = await get_game(game_id=game_id)
    await call.message.edit_text(text=f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É "{game[1]}?',
                                 reply_markup=await kb.admin_canc_game_keyboard(game_id))
@callbacks.callback_query(F.data.startswith('admin_cancel_game'))
async def admin_cancel_game(call: CallbackQuery):
    game_id = int(call.data.split('_')[3])
    game = await get_game(game_id)
    await delete_game(game_id)
    await call.message.edit_text(text=f'–ò–≥—Ä–∞ "{game[1]}" –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=await kb.admin_send_end_game(game_id))
@callbacks.callback_query(F.data.startswith('admin_send_end'))
async def admin_send_end(call: CallbackQuery, bot: Bot):
    game_id = int(call.data.split('_')[3])
    users = await get_game_users(game_id=game_id)
    await call.message.edit_text(text=f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∏–≥—Ä—ã...({(len(users)+len(CHATS_IDS))*0.05} '
                                      f'c–µ–∫—É–Ω–¥)', reply_markup=None)
    for user in users:
        await asyncio.sleep(0.05)
        try:
            await bot.send_message(chat_id=user[0], text=END_GAME_MESSAGE, reply_markup=await kb.user_back_keyboard())
        except TelegramBadRequest:
            pass
    for chat in CHATS_IDS:
        await asyncio.sleep(0.05)
        try:
            await bot.send_message(chat_id=chat, text=END_GAME_MESSAGE, reply_markup=await kb.bot_url())
        except TelegramBadRequest:
            pass
    await call.message.edit_text(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=await kb.admin_keyboard())
@callbacks.callback_query(F.data.startswith('admin_add_prize'))
async def admin_add_prize(call: CallbackQuery, state: FSMContext):
    game_id = int(call.data.split('_')[3])
    await state.update_data(game_id=game_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–∑–∞:', reply_markup=await kb.admin_game_prize_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_prize_text)
@callbacks.callback_query(F.data.startswith('admin_game_prizes_'))
async def admin_game_prizes(call: CallbackQuery):
    game_id = int(call.data.split('_')[3])
    game = await get_game(game_id)
    prizes = await get_prizes(game_id)
    prizes_count = 0
    for prize in prizes:
        prizes_count += prize[3]
    if prizes:
        await call.message.edit_text(text=f'–ü—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç –≤ –∏–≥—Ä–µ: {game[3]}\n'
                                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤: {prizes_count}\n'
                                     '–ü—Ä–∏–∑—ã —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã:',
                                     reply_markup=await kb.admin_prizes_keyboard(prizes=prizes, game_id=game_id))
    else:
        await call.message.edit_text(text='–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∏–≥—Ä–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–∑—ã\n'
                                          f'–ü—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤ –∏–≥—Ä–µ: {game[3]}',
                                     reply_markup=await kb.admin_prizes_keyboard(prizes=prizes, game_id=game_id))
@callbacks.callback_query(F.data.startswith('admin_current_prize'))
async def admin_current_prize(call: CallbackQuery, state: FSMContext):
    await state.clear()
    prize_id = int(call.data.split('_')[3])
    prize = await get_prize(prize_id)
    await call.message.edit_text(text=f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–∑: {prize[1]} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {prize[3]} —à—Ç',
                                 reply_markup=await kb.admin_current_prize_keyboard(prize_id=prize_id))
@callbacks.callback_query(F.data.startswith('admin_del_prize'))
async def admin_del_prize(call: CallbackQuery):
    prize_id = int(call.data.split("_")[3])
    prize = await get_prize(prize_id=prize_id)
    await del_prize(prize_id)
    prizes = await get_prizes(prize[2])
    await call.message.edit_text(text=f'–ü—Ä–∏–∑ {prize[1]} - {prize[3]} —à—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω',
                                 reply_markup=await kb.admin_prizes_keyboard(prizes, prize[2]))
@callbacks.callback_query(F.data.startswith('admin_text_prize'))
async def admin_text_prize(call: CallbackQuery, state: FSMContext):
    prize_id = int(call.data.split('_')[3])
    await state.update_data(prize_id=prize_id)
    await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–∑–∞:',
                                 reply_markup=await kb.admin_text_prize_keyboard(prize_id=prize_id))
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_new_prize_text)
@callbacks.callback_query(F.data.startswith('admin_count_prize'))
async def admin_text_prize(call: CallbackQuery, state: FSMContext):
    prize_id = int(call.data.split('_')[3])
    await state.update_data(prize_id=prize_id)
    await call.message.edit_text(text='–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–∞–æ –ø—Ä–∏–∑–æ–≤:',
                                 reply_markup=await kb.admin_text_prize_keyboard(prize_id=prize_id))
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_new_prize_count)
@callbacks.callback_query(F.data.startswith('admin_users_game'))
async def admin_users_game(call: CallbackQuery):
    game_id = int(call.data.split('_')[3])
    game = await get_game(game_id)
    users = await get_game_users(game_id=game_id)
    text = f'–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã "{game[1]}":\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(users)}\n'
    for user in users:
        user_info = await get_user(user_id=user[0])
        if user_info[0]:
            text += f'@{user_info[1]}\n'
        else:
            text += f'@{user_info[0]} - {user_info[2]}\n'
    await call.message.edit_text(text=text, reply_markup=await kb.admin_back_keyboard())
@callbacks.callback_query(F.data == 'admin_game_history')
async def admin_game_history(call: CallbackQuery):
    games = await get_games_history()
    text = '–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä:\n'
    if games:
        await call.message.edit_text(text=text, reply_markup=await kb.admin_history_keyboard(games=games))
    else:
        await call.message.edit_text(text='–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞', reply_markup=await kb.admin_back_keyboard())
@callbacks.callback_query(F.data.startswith('admin_shablon_prize_'))
async def admin_shablon_prize(call: CallbackQuery):
    game_id = int(call.data.split('_')[3])
    prizes = await get_all_prizes()
    if prizes:
        for prize in prizes:
            counter = 0
            for i in prizes:
                if prize[1] == i[1]:
                    if counter != 0:
                        prizes.remove(i)
                    if counter == 0:
                        counter += 1
    prizes = prizes[::-1]
    await call.message.edit_text(text='–®–∞–±–ª–æ–Ω –ø—Ä–∏–∑–æ–≤:\n<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —à–∞–±–ª–æ–Ω</i>',
                                 reply_markup=await kb.admin_shablon_prizes_keyboard(prizes=prizes, game_id=game_id))
@callbacks.callback_query(F.data.startswith('admin_shablon_add'))
async def admin_shablon_add(call: CallbackQuery, state: FSMContext):
    prize_id = int(call.data.split('_')[3])
    game_id = int(call.data.split('_')[4])
    await state.update_data(prize_id=prize_id)
    await state.update_data(game_id=game_id)
    await state.update_data(message_id=call.message.message_id)
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤:', reply_markup=await kb.admin_back_keyboard())
    await state.set_state(FSM.set_shablon_count)

@callbacks.callback_query(F.data.startswith('admin_history_'))
async def admin_history(call: CallbackQuery):
    game_id = int(call.data.split('_')[2])
    game = await get_game(game_id=game_id)
    winners = await get_game_winners(game_id=game_id)
    text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ:\n'
    text += f'–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: {game[1]}\n'
    text += f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {game[2]}\n'
    text += f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {game[3]}\n'
    text += f'–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {game[5]}\n'
    text += f'–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {game[6]}\n'
    text += f'–ü—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞:\n'
    for winner in winners:
        user = await get_user(user_id=winner[0])
        prize = await get_prize(prize_id=winner[1])
        if user[1]:
            text += f'@{user[1]} - {prize[1]}\n'
        else:
            text += f'@{user[2]} - {prize[1]}\n'
    await call.message.edit_text(text=text, reply_markup=await kb.admin_back_keyboard())
@callbacks.callback_query(F.data.startswith('user_game'))
async def user_game(call: CallbackQuery, bot: Bot):
    game_id = int(call.data.split('_')[2])
    buttons = await is_chat_member(message=call.message, bot=bot)
    if not buttons:
        if await is_banned(user_id=call.from_user.id):
            await call.message.edit_text(text='‚õî  –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=None)
            return
        user = await get_user(user_id=call.message.chat.id)
        if user[10]:
            is_vip = datetime.datetime.fromisoformat(user[10]) > datetime.datetime.now()
        else:
            is_vip = False
        timeout = await get_game_timeout(user_id=call.message.chat.id)
        if not is_vip:
            if timeout:
                await call.message.edit_text(text='‚ö†  <b>–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∏–≥—Ä–µ –Ω–µ–¥–∞–≤–Ω–æ</b>',
                                             reply_markup=await kb.user_back_keyboard())
                return
        if await join_game(user_id=call.from_user.id, game_id=game_id):
            await call.message.edit_text(text='<b>‚úÖ  –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!</b>',
                                         reply_markup=await kb.user_back_keyboard())
            game = await get_active_game()
            game_prizes = await get_prizes(game_id=game_id)
            count = 0
            for prize in game_prizes:
                count += prize[3]
            if await number_of_users(game[0]) >= game[2]:
                game = await get_game(game_id=game_id)
                prizes = await get_prizes(game_id)
                prizes_count = 0
                await end_game(game_id=game_id)
                for prize in prizes:
                    prizes_count += prize[3]
                users = await get_game_users(game_id=game_id)
                await bot.send_message(chat_id=ADMINS_IDS[0],
                                       text=f'–ò–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ '
                                            f'({(prizes_count+len(users)+len(CHATS_IDS))* 0.06} '
                                            f'c–µ–∫—É–Ω–¥)', reply_markup=await kb.admin_keyboard())
                for user in users:
                    if user[0] not in ADMINS_IDS:
                        await asyncio.sleep(0.06)
                        await bot.send_message(chat_id=user[0],
                                               text=f'üéâ  <b>–ò–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n<i>üéÅ  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã '
                                                    f'–±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</i>',
                                               reply_markup=await kb.user_back_keyboard())
                if CHATS_IDS:
                    for chat in CHATS_IDS:
                        await asyncio.sleep(0.06)
                        await bot.send_message(chat_id=chat,
                                               text=f'üéâ  <b>–ò–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n<i>üéÅ  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã '
                                                    f'–±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</i>')
                counter = 0
                pins = await get_pins(game_id=game_id)
                if pins:
                    for pin in pins:
                        await bot.unpin_chat_message(chat_id=pin[2], message_id=pin[1])
                        await asyncio.sleep(0.05)
                game = await get_game(game_id=game_id)
                text = ''
                chat_text = f'<b>‚ú®  –ò–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b>\n'
                users = await get_game_users(game_id=game_id)
                for prize in prizes:
                    count = prize[3]
                    while count >= 1:
                        winner = random.choice(users)
                        users.remove(winner)
                        user = await get_user(user_id=winner[0])
                        await set_game_timeout(user_id=user[0])
                        if user[12] == 1:
                            chat_text += f'<i>üï∂ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {prize[1]}\n</i>'
                        else:
                            chat_text += f'<i>@{user[1]}: {prize[1]}\n</i>'
                        try:
                            match_ = re.match(r"(\d+)", prize[1].lower())
                            try:
                                value = int(match_.group(1))
                                await update_balance(winner[0], value)
                            except ValueError:
                                await bot.send_message(chat_id=winner[0], text=f'üéâ  <b>–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∏–≥—Ä–µ!</b>\n<i>üéÅ  '
                                                                               f'–í–∞—à –ø—Ä–∏–∑: <b>{prize[1]}</b></i>\n'
                                                                               f'<i>‚ú®  –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω–µ–æ–±–∑–æ–¥–∏–º–æ'
                                                                               f' –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</i>',
                                                       reply_markup=await kb.admin_url_keyboard())
                            await bot.send_message(chat_id=winner[0],
                                                   text=f'üéâ  <b>–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∏–≥—Ä–µ!</b>\n<i>üéÅ  –í–∞—à –ø—Ä–∏–∑: <b>'
                                                        f'{prize[1]}</b></i>\n<i>‚ú®  –ü—Ä–∏–∑ –Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!</i>',
                                                   reply_markup=await kb.user_back_keyboard())
                            counter += 1
                        except Exception:
                            await asyncio.sleep(0.06)
                            try:
                                await bot.send_message(chat_id=winner[0], text=f'üéâ  <b>–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∏–≥—Ä–µ!</b>\n<i>üéÅ  '
                                                                               f'–í–∞—à –ø—Ä–∏–∑: <b>{prize[1]}</b></i>\n'
                                                                               f'<i>‚ú®  –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω–µ–æ–±–∑–æ–¥–∏–º–æ'
                                                                               f' –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</i>',
                                                       reply_markup=await kb.admin_url_keyboard())
                                counter += 1
                            except Exception as e:
                                print(e)
                                text += f'@{user[1]}: {prize[1]}\n'
                        await add_winner(winner[0], prize[0], game_id)
                        count -= 1
                await bot.send_message(chat_id=ADMINS_IDS[0], text=f'–ò–≥—Ä–∞ "{game[1]}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ù–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: '
                                       f'{prizes_count - counter}\n{text}', reply_markup=await kb.admin_keyboard())
                chat_text += f'\n<i><b>üéÅ  –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!</b></i>'
                if CHATS_IDS:
                    for chat in CHATS_IDS:
                        await asyncio.sleep(0.06)
                        pin = await bot.send_message(chat_id=chat, text=chat_text, reply_markup=await kb.bot_url())
                        await bot.pin_chat_message(chat_id=chat, message_id=pin.message_id)
            else:
                pins = await get_pins(game_id=game_id)
                prizes = await get_prizes(game_id)
                prizes_count = 0
                for prize in prizes:
                    prizes_count += prize[3]
                if pins:
                    for pin in pins:
                        try:
                            await bot.edit_message_text(chat_id=pin[2], message_id=pin[1],
                                                        text=f'<b>‚ú®  –ù–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –∏–≥—Ä–∞!\n‚ö†  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: '
                                                        f'{game[2]}\n</b>'
                                                        f'<i>üéÅ  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: {prizes_count}</i>'
                                                        f'\n<i>üé´  –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞</i>'
                                                        f'\n<b>üìÉ  –£—á–∞—Å—Ç–Ω–∏–∫–∏: {await number_of_users(game[0])}</b>',
                                                        reply_markup=await kb.bot_url())
                        except Exception:
                            print('chat_id: '+str(pin[2])+' message_id: '+str(pin[1])+' cant edit message')
        else:
            await call.message.edit_text(text='<b>M–µ—Å—Ç–∞ –≤ –∏–≥—Ä–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!</b>',
                                         reply_markup=None)
    else:
        await call.message.edit_text(text='–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±x–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞:',
                                     reply_markup=await kb.start_keyboard(buttons=buttons))
@callbacks.callback_query(F.data == 'moment_loto')
async def moment_loto(call: CallbackQuery):
    user = await get_user(user_id=call.message.chat.id)
    daily_user_loto = await get_daily_moment_loto_by_user_id(user_id=call.message.chat.id)
    weekly_user_loto = await get_weekly_moment_loto_by_user_id(user_id=call.message.chat.id)
    monthly_user_loto = await get_monthly_moment_loto_by_user_id(user_id=call.message.chat.id)
    if user[9] >= 1:
        text = (f'<b>üíµ  –í–∞—à –±–∞–ª–∞–Ω—Å: {user[9]}</b>\n<i>‚ú®  –°—ã–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π —Å–µ–≥–æ–¥–Ω—è: {daily_user_loto[0]}</i>\n'
                f'<i>‚ú®  –°—ã–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {weekly_user_loto[0]}</i>\n'
                f'<i>‚ú®  –°—ã–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_user_loto[0]}</i>\n')
        await call.message.edit_text(text=text, reply_markup=await kb.moment_loto_keyboard())
    else:
        await call.message.edit_text(text='‚õî  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
                                     reply_markup=await kb.user_back_keyboard())
@callbacks.callback_query(F.data.startswith('moment_loto_'))
async def moment_loto_start(call: CallbackQuery, state: FSMContext):
    user = await get_user(user_id=call.message.chat.id)
    ttype = call.data.split('_')[2]
    text = (f'<b>üíµ  –í–∞—à –±–∞–ª–∞–Ω—Å: {user[9]}</b>\n<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å—Ç–∞–≤–∫–∞–º: –æ—Ç {LOTO_LIMIT[0]} –¥–æ {LOTO_LIMIT[1]}\n</b>'
            f'<i>‚úè  –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:</i>')
    await call.message.edit_text(text=text, reply_markup=await kb.user_back_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_moment_loto_value)
    match ttype:
        case 'hell':
            await state.update_data(ttype=1)
        case 'hard':
            await state.update_data(ttype=2)
        case 'medium':
            await state.update_data(ttype=3)
        case 'easy':
            await state.update_data(ttype=4)

@callbacks.callback_query(F.data == 'm_loto_confirm')
async def m_loto_confirm(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    value = data['value']
    await update_balance(user_id=call.message.chat.id, value=(-value))
    settings = MOMENT_LOTO
    check = False
    if random.randint(0, 99) < 95:
        res = random.randint(0, 9)
    else:
        res = 0
    start_value = value
    if LOTO_TYPE[0] == 'standart':
        match res:
            case 0:
                pass
            case 1:
                value *= 2
                check = True
            case 2:
                value *= 3
                check = True
            case 3:
                value *= 4
                check = True
            case _:
                value = 0
    elif LOTO_TYPE[0] == 'low':
        match res:
            case 0:
                value = 0
            case 1:
                value *= 2
                check = True
            case 2:
                value *= 3
                check = True
            case 3:
                value *= 4
                check = True
            case 4:
                pass
            case _:
                value = 0
    elif LOTO_TYPE[0] == 'hight':
        match res:
            case 0:
                value *= 2
                check = True
            case 1:
                value *= 2
                check = True
            case 2:
                value *= 3
                check = True
            case 3:
                value *= 4
                check = True
            case _:
                value = 0
    elif LOTO_TYPE[0] == 'simple':
        match res:
            case 0:
                value = 0
            case 1:
                value *= 2
                check = True
            case 2:
                value *= 2
                check = True
            case 3:
                value *= 2
                check = True
            case 4:
                value *= 2
                check = True
            case 5:
                value *= 2
                check = True
            case _:
                value = 0
    elif LOTO_TYPE[0] == 'loser':
        match res:
            case 0:
                pass
            case 1:
                value *= 2
                check = True
            case 2:
                value = 0
            case 3:
                value *= 4
                check = True
            case _:
                value = 0
    await state.clear()
    await add_spin(user_id=call.message.chat.id)
    daily_user_loto = await get_daily_moment_loto_by_user_id(user_id=call.message.chat.id)
    weekly_user_loto = await get_weekly_moment_loto_by_user_id(user_id=call.message.chat.id)
    monthly_user_loto = await get_monthly_moment_loto_by_user_id(user_id=call.message.chat.id)
    if check:
        await add_moment_loto(user_id=call.message.chat.id, value=value, result=1, start_value=start_value)
        await update_balance(user_id=call.message.chat.id, value=value)
    else:
        await add_moment_loto(user_id=call.message.chat.id, value=value, result=0, start_value=start_value)
    if check:
        user = await get_user(user_id=call.message.chat.id)
        text = (f'üéâ  <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {value}!</b>\n<b>üíµ  –í–∞—à –±–∞–ª–∞–Ω—Å: {user[9]}</b>\n<i>‚ú®  –°—ã–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π —Å–µ–≥–æ–¥–Ω—è: '
                f'{daily_user_loto[0]}</i>\n'
                f'<i>‚ú®  –°—ã–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {weekly_user_loto[0]}</i>\n'
                f'<i>‚ú®  –°—ã–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_user_loto[0]}</i>\n')
    else:
        user = await get_user(user_id=call.message.chat.id)
        text = (f'<b>‚ú®  –í —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!</b>\n'
                f'<b>üíµ  –í–∞—à –±–∞–ª–∞–Ω—Å: {user[9]}</b>\n<i>‚ú®  –°—ã–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π —Å–µ–≥–æ–¥–Ω—è: '
                f'{daily_user_loto[0]}</i>\n'
                f'<i>‚ú®  –°—ã–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {weekly_user_loto[0]}</i>\n'
                f'<i>‚ú®  –°—ã–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_user_loto[0]}</i>\n')
    user = await get_user(user_id=call.message.chat.id)
    if user[9] >= 1:
        markup = await kb.moment_loto_keyboard()
    else:
        markup = await kb.user_back_keyboard()
    await call.message.edit_text(text=text, reply_markup=markup)
    await state.clear()
@callbacks.callback_query(F.data.startswith('admin_moment_loto_type_'))
async def admin_moment_loto_type(call: CallbackQuery):
    LOTO_TYPE.pop()
    LOTO_TYPE.append(call.data.split('_')[4])
    type_ = ''
    match LOTO_TYPE[0]:
        case 'standart':
            type_ = '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'
        case 'low':
            type_ = '–Ω–∏–∑–∫–∞—è'
        case 'hight':
            type_ = '–≤—ã—Å–æ–∫–∞—è'
        case 'simple':
            type_ = '–ø—Ä–æ—Å—Ç–∞—è'
        case 'loser':
            type_ = '–ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è'
    await call.message.edit_text(text=f'–¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {type_}',
                                 reply_markup=await kb.admin_back_to_loto_settings_keyboard())



@callbacks.callback_query(F.data == 'loto_tickets')
async def loto_tickets(call: CallbackQuery):
    user = await get_user(user_id=call.message.chat.id)
    daily_loto = await get_daily_moment_loto()
    weekly_loto = await get_weekly_moment_loto()
    monthly_loto = await get_monthly_moment_loto()
    daily_prize = DAILY_LOTO[0] + DAILY_LOTO[1] * daily_loto[0]
    weekly_prize = WEEKLY_LOTO[0] + WEEKLY_LOTO[1] * weekly_loto[0]
    monthly_prize = MONTHLY_LOTO[0] + MONTHLY_LOTO[1] * monthly_loto[0]
    text = (f'<b>üíµ  –í–∞—à –±–∞–ª–∞–Ω—Å: {user[9]}\n</b><i>‚úè  –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ª–æ—Ç–µ—Ä–µ–∏:</i>\n<b>–£—Å–ª–æ–≤–∏—è: </b>\n<i>üéü  '
            f'–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–∏–ª–µ—Ç: 500 –∏ 10 —É—á–∞—Å—Ç–∏–π '
            f'–≤ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–µ\n</i><i>üéü  –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–∏–ª–µ—Ç: 1000 –∏ 50 —É—á–∞—Å—Ç–∏–π –≤ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–µ\n</i>'
            f'<i>üéü  –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –±–∏–ª–µ—Ç: 4000 –∏ 100 —É—á–∞—Å—Ç–∏–π –≤ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–µ</i>\n'
            f'<b>‚ú®  C–∏–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π —Å–µ–≥–æ–¥–Ω—è: {daily_loto[0]}</b>\n<b>üíµ  –ü—Ä–∏ –ø–æ–±–µ–¥–µ –ø—Ä–∏–∑: {daily_prize}!</b>\n'
            f'<b>‚ú®  C–∏–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {weekly_loto[0]}</b>\n<b>üíµ  –ü—Ä–∏ –ø–æ–±–µ–¥–µ –ø—Ä–∏–∑: {weekly_prize}!</b>\n'
            f'<b>‚ú®  C–∏–≥—Ä–∞–Ω–æ –ª–æ—Ç–µ—Ä–µ–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {monthly_loto[0]}</b>\n<b>üíµ  –ü—Ä–∏ –ø–æ–±–µ–¥–µ –ø—Ä–∏–∑: {monthly_prize}!</b>\n'
            '<i>üìÖ  –ì—Ä–∞—Ñ–∏–∫ –ª–æ—Ç–µ—Ä–µ–π:\nüé´  –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00\nüé´  –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è: –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:00\n'
            'üé´  –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è: –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 00:00</i>\n')
    await call.message.edit_text(text=text, reply_markup=await kb.loto_tickets_keyboard(user))
@callbacks.callback_query(F.data == 'user_anonim')
async def user_anonim(call: CallbackQuery):
    await call.message.edit_text(text='–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–Ω–æ–Ω–∏–º–∞, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä—ã',
                                 reply_markup=await kb.user_back_keyboard())
    await set_user_anonim(user_id=call.message.chat.id, value=1)
@callbacks.callback_query(F.data == 'user_visible')
async def user_visible(call: CallbackQuery):
    await call.message.edit_text(text='–°—Ç–∞—Ç—É—Å –∞–Ω–æ–Ω–∏–º–∞ —Å–Ω—è—Ç, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä—ã',
                                 reply_markup=await kb.user_back_keyboard())
    await set_user_anonim(user_id=call.message.chat.id, value=0)


@callbacks.callback_query(F.data.startswith('t_ticket_'))
async def t_ticket(call: CallbackQuery):
    _type = call.data.split('_')[2]
    match _type:
        case 'daily':
            await update_balance(user_id=call.message.chat.id, value=-500)
            await get_daily_ticket(user_id=call.message.chat.id)
            await call.message.edit_text(text='‚úÖ  –í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏',
                                         reply_markup=await kb.user_back_keyboard())
        case 'weekly':
            await update_balance(user_id=call.message.chat.id, value=-1000)
            await get_weekly_ticket(user_id=call.message.chat.id)
            await call.message.edit_text(text='‚úÖ  –í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏',
                                         reply_markup=await kb.user_back_keyboard())
        case 'monthly':
            await update_balance(user_id=call.message.chat.id, value=-4000)
            await get_monthly_ticket(user_id=call.message.chat.id)
            await call.message.edit_text(text='‚úÖ  –í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏',
                                         reply_markup=await kb.user_back_keyboard())
@callbacks.callback_query(F.data == 'admin_loto')
async def admin_loto(call: CallbackQuery):
    daily_count = await get_daily_users_count()
    weekly_count = await get_weekly_users_count()
    monthly_count = await get_monthly_users_count()
    daily_moment_loto = await get_daily_moment_loto_db()
    weekly_moment_loto = await get_weekly_moment_loto_db()
    monthly_moment_loto = await get_monthly_moment_loto_db()
    all_loto = await get_all_moment_loto()
    all_loto_payed = 0
    all_loto_winned = 0
    all_loto_count_winned = 0
    for loto in all_loto:
        all_loto_payed += loto[2]
        if loto[3] == 1:
            all_loto_winned += loto[5]
            all_loto_count_winned += 1
    daily_payed = 0
    daily_winned = 0
    daily_count_winned = 0
    weekly_payed = 0
    weekly_winned = 0
    weekly_count_winned = 0
    monthly_payed = 0
    monthly_winned = 0
    monthly_count_winned = 0
    for daily in daily_moment_loto:
        daily_payed += daily[2]
        if daily[3] == 1:
            daily_winned += daily[5]
            daily_count_winned += 1
    for weekly in weekly_moment_loto:
        weekly_payed += weekly[2]
        if weekly[3] == 1:
            weekly_winned += weekly[5]
            weekly_count_winned += 1
    for monthly in monthly_moment_loto:
        monthly_payed += monthly[2]
        if monthly[3] == 1:
            monthly_winned += monthly[5]
            monthly_count_winned += 1
    text = f'üìã  <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ—Ç–µ—Ä–µ–π:</b>\n'
    if daily_count:
        text += f'üìÖ  <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è:</b>\nüéü  <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {daily_count[0]}</i>\n'
    if weekly_count:
        text += f'üìÖ  <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è:</b>\nüéü  <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {weekly_count[0]}</i>\n'
    if monthly_count:
        text += f'üìÖ  <b>–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è:</b>\nüéü  <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {monthly_count[0]}</i>\n'
    text += '\n'
    if all_loto:
        text += (f'‚ú®  <b>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏ –≤—Å–µ–≥–æ:\n<i>C–∏–≥—Ä–∞–Ω–æ: {len(all_loto)}\n–í—ã–∏–≥—Ä–∞–Ω–æ: {all_loto_count_winned}\n'
                 f'–°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {all_loto_payed}\n–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º: {all_loto_winned}</i></b>\n')
    if daily_moment_loto:
        text += (f'‚ú®  <b>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏ —Å–µ–≥–æ–¥–Ω—è:\n<i>C–∏–≥—Ä–∞–Ω–æ: {len(daily_moment_loto)}\n–í—ã–∏–≥—Ä–∞–Ω–æ: '
        f'{daily_count_winned}\n–°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {daily_payed}\n–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º: {daily_winned}</i></b>\n')
    if weekly_moment_loto:
        text += (f'‚ú®  <b>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n<i>C–∏–≥—Ä–∞–Ω–æ: {len(weekly_moment_loto)}\n–í—ã–∏–≥—Ä–∞–Ω–æ: '
        f'{weekly_count_winned}\n–°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {weekly_payed}\n–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º: {weekly_winned}</i></b>\n')
    if monthly_moment_loto:
        text += (f'‚ú®  <b>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n<i>C–∏–≥—Ä–∞–Ω–æ: {len(monthly_moment_loto)}\n–í—ã–∏–≥—Ä–∞–Ω–æ: '
        f'{monthly_count_winned}\n–°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {monthly_payed}\n–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º: {monthly_winned}</i></b>\n')
    await call.message.edit_text(text=text, reply_markup=await kb.admin_back_keyboard())

@callbacks.callback_query(F.data.startswith('referrer'))
async def referrer(call: CallbackQuery):
    addresses_count = await get_active_addresses_count()
    user_address = await get_user_address(user_id=call.from_user.id)
    referrers_count = await get_referrers_count(user_id=call.from_user.id)
    if user_address:
        text = (f'üéÅ<b>  –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {user_address[0][0]}\n'
                f'‚ú®  –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è!</b>')
        await call.message.edit_text(text=text, reply_markup=await kb.admin_url_keyboard())
        return
    if referrers_count >= REFERRER_MISSION:
        address = await get_free_address(call.message.chat.id)
        text = (f'<b>üéâ  –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ü–µ–ª–∏!\n'
                f'<i>üéÅ  –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥: {address[0]}\n</i>'
                f'üì≤  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–¥—Ä–µ—Å</b>')
        await call.message.edit_text(text=text, reply_markup=await kb.admin_url_keyboard())
        return
    if addresses_count == 0:
        await call.message.edit_text(text='üîç <b> –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å</b>',
                                     reply_markup=await kb.user_back_keyboard())
        return

    else:
        text = (f'‚ú®  <b>–û—Å–æ–±–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>\nüì¨  <u>–ü—Ä–∏–≥–ª–∞—Å–∏ 15 –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–¥—Ä–µ—Å!\n'
                f'üìÉ  –î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referrers_count}\n‚ö†  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å: {REFERRER_MISSION}</u>\n'
                f'‚ú®  <b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {addresses_count[0]}</b>\n'
                f'üì≤  <u>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:</u>\n'
                f'https://t.me/{BOT_USERNAME}?start={call.message.chat.id}')
        await call.message.edit_text(text=text, reply_markup=await kb.user_back_keyboard())
@callbacks.callback_query(F.data == 'admin_addresses')
async def admin_addresses(call: CallbackQuery):
    addresses = await get_addresses()
    await call.message.edit_text(text='–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:',
                                 reply_markup=await kb.admin_addresses_keyboard(addresses=addresses))
@callbacks.callback_query(F.data.startswith('admin_address_select'))
async def admin_address_select(call: CallbackQuery):
    address_id = int(call.data.split('_')[3])
    address = await get_address(address_id=address_id)
    await call.message.edit_text(text=f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <i>{address[1]}</i>',
                                 reply_markup=await kb.admin_address_select_keyboard(address_id))
@callbacks.callback_query(F.data.startswith('admin_address_deactivate'))
async def admin_address_deactivate(call: CallbackQuery):
    address_id = int(call.data.split('_')[3])
    await deactivate_address(address_id)
    await call.message.edit_text(text='–ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                                 reply_markup=await kb.admin_address_select_keyboard(address_id))
@callbacks.callback_query(F.data.startswith('admin_address_activate'))
async def admin_address_activate(call: CallbackQuery):
    address_id = int(call.data.split('_')[3])
    await activate_address(address_id)
    await call.message.edit_text(text='–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                                 reply_markup=await kb.admin_address_select_keyboard(address_id))
@callbacks.callback_query(F.data.startswith('admin_address_delete'))
async def admin_address_delete(call: CallbackQuery):
    address_id = int(call.data.split('_')[3])
    await delete_address(address_id)
    await call.message.edit_text(text='–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª—ë–Ω', reply_markup=await kb.admin_keyboard())
@callbacks.callback_query(F.data == 'admin_add_address')
async def admin_add_address(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:', reply_markup=None)
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_address)
@callbacks.callback_query(F.data == 'user_menu')
async def user_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    subscribe = await check_subscribe_db(user_id=call.message.chat.id)
    await update_username_name(user_id=call.message.chat.id, username=call.message.chat.username,
                               first_name=call.message.chat.first_name)
    if subscribe[0]:
        user = await get_user(user_id=call.message.chat.id)
        if user[10] != '':
            check = datetime.datetime.isoformat(datetime.datetime.now()) < user[10]
            if check:
                text = f'üìã  <b>–ú–µ–Ω—é:</b>\n<b>üíµ  –ë–∞–ª–∞–Ω—Å: {user[9]}</b>\n<i>‚ú® VIP –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user[10]}</i>'
            else:
                text = (f'üìã  <b>–ú–µ–Ω—é:</b>\n<b>üíµ  –ë–∞–ª–∞–Ω—Å: {user[9]}</b>\n'
                        f'<i>‚ö†  –ü–æ–¥–ø–∏—Å–∫–∞ VIP –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞</i>')
        else:
            text = (f'üìã  <b>–ú–µ–Ω—é:</b>\n<b>üíµ  –ë–∞–ª–∞–Ω—Å: {user[9]}</b>\n'
                    f'<i>‚ö†  –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å VIP –ø–æ–¥–ø–∏—Å–∫—É</i>')
        subscribe = await check_subscribe_db(user_id=call.message.chat.id)
        left = (datetime.datetime.fromisoformat(subscribe[1]).date() - datetime.datetime.now().date())
        text += f'\n<b>–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {left.days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞\n</b>'
        await call.message.edit_text(text=text, reply_markup=await kb.user_menu(call.message.chat.id))
    else:
        await call.message.edit_text(text='<b>‚õî  –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!</b>\n<i>‚ö†  –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏'
                                          '–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!</i>\n',
                                     reply_markup=await kb.admin_url_keyboard(status=False))
@callbacks.callback_query(F.data == 'user_prizes')
async def user_prizes(call: CallbackQuery):
    game = await get_active_game()
    if game:
        prizes_count = await get_prizes_count(game_id=game[0])
        text = (f'‚ö†  <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {game[2]}\n'
                f'üéÅ  <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: {prizes_count}</b></i>\n'
                f'‚ú®  <b>–ü—Ä–∏–∑—ã —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã:</b>\n\n')
        prizes = await get_prizes(game[0])
        for prize in prizes:
            text += f'<b>üéÅ  {prize[1]} - {prize[3]} —à—Ç.</b>\n'
        await call.message.edit_text(text=text,
                                     reply_markup=await kb.user_prizes_keyboard(prizes, call.message.chat.id, game[0]))
    else:
        await call.message.edit_text(text='‚ö†  –¢–µ–∫—É—â–∏—Ö –∏–≥—Ä –Ω–µ—Ç', reply_markup=await kb.user_back_keyboard())
@callbacks.callback_query(F.data == 'user_subscribe')
async def user_subscribe(call: CallbackQuery):
    subscribe = await check_subscribe_db(user_id=call.message.chat.id)
    if subscribe[0]:
        days = datetime.datetime.fromisoformat(subscribe[1]) - datetime.datetime.now()
        await call.message.edit_text(text=f'<b>‚úÖ  –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n<i>‚ú®  –û—Å—Ç–∞–ª–æ—Å—å {days.days} '
                                          f'–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏</i>', reply_markup=await kb.user_back_keyboard())
    else:
        await call.message.edit_text(text='<b>‚õî  –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!</b>\n<i>‚ö†  –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥'
                                          '–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!</i>\n', reply_markup=await kb.admin_url_keyboard())

@callbacks.callback_query(F.data == 'admin_vip_subscribe')
async def admin_vip_subscribe(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=await kb.admin_back_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_username_to_update_vip)
@callbacks.callback_query(F.data == 'admin_bot_subscribe')
async def admin_bot_subscribe(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=await kb.admin_back_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_username_to_update_subscribe)
@callbacks.callback_query(F.data == 'admin_add_balance')
async def admin_add_balance(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=await kb.admin_back_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_username_to_update_balance)
@callbacks.callback_query(F.data == 'buy_vip')
async def buy_vip(call: CallbackQuery):
    await call.message.edit_text(text='<b>‚ú®  –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ VIP, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>',
                                 reply_markup=await kb.admin_url_keyboard())
@callbacks.callback_query(F.data == 'buy_cash')
async def buy_vip(call: CallbackQuery):
    await call.message.edit_text(text='<b>‚ú®  –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ VIP, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>',
                                 reply_markup=await kb.admin_url_keyboard())
@callbacks.callback_query(F.data == 'get_cash')
async def get_cash(call: CallbackQuery):
    if await check_vip(user_id=call.message.chat.id) == '':
        await call.message.edit_text(text='<b>‚ú®  –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å VIP –ø–æ–¥–ø–∏—Å–∫—É</b>',
                                     reply_markup=await kb.admin_url_keyboard())
    await call.message.edit_text(text='<b>‚ú®  –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>',
                                 reply_markup=await kb.admin_url_keyboard())
@callbacks.callback_query(F.data == 'admin_edit_balance')
async def admin_edit_balance(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=await kb.admin_back_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_username_to_edit_balance)
@callbacks.callback_query(F.data == 'admin_u_b')
async def admin_u_b(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', reply_markup=await kb.admin_back_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_value_to_edit_balance)
@callbacks.callback_query(F.data == 'admin_s_b')
async def admin_s_b(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', reply_markup=await kb.admin_back_keyboard())
    await state.update_data(message_id=call.message.message_id)
    await state.set_state(FSM.set_value_to_update_balance)
@callbacks.callback_query(F.data.startswith('admin_send_'))
async def admin_send(call: CallbackQuery, state: FSMContext):
    await state.clear()
    send_id = int(call.data.split('_')[2])
    await call.message.delete()
    await admin_send_message(call.message, send_id)